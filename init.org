#+title: Chen Yi's Emacs Configraution

* Startup

#+begin_src emacs-lisp
;;; init.el --- auto-generated by `init.org' -*- lexical-binding: t -*-
;;; Commentary:
;;; Code:

#+end_src

** Adjust garbage collection threshold for early startup (see use of gcmh below)

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 128 1024 1024))
#+end_src

** Configure ELPA repositories

#+begin_src emacs-lisp
(setq package-archives '(("gnu" . "https://mirrors.ustc.edu.cn/elpa/gnu/")
                         ("melpa" . "https://mirrors.ustc.edu.cn/elpa/melpa/")
                         ("nongnu" . "https://mirrors.ustc.edu.cn/elpa/nongnu/")))
#+end_src

** Fire up =package.el=

#+begin_src emacs-lisp
(setq package-enable-at-startup nil)
(setq package-native-compile t)
(package-initialize)
#+end_src

** Load =use-package= for all the declarations below

#+begin_src emacs-lisp
(eval-and-compile
  (defsubst my/emacs-path (path)
    (expand-file-name path user-emacs-directory))

  (defsubst my/user-data (dir)
    (expand-file-name dir (my/emacs-path "data")))

  (setq load-path (append (delete-dups load-path)
                          (list (my/emacs-path "lisp")))))

(require 'use-package)

(setq debug-on-error init-file-debug
      use-package-compute-statistics init-file-debug
      use-package-expand-minimally (not init-file-debug)
      use-package-verbose init-file-debug)
#+end_src

** During loading of this module, clear =file-name-handler-alist=

#+begin_src emacs-lisp
(defvar file-name-handler-alist-old file-name-handler-alist)

(setq file-name-handler-alist nil)

(add-hook 'after-init-hook
          #'(lambda ()
              (setq file-name-handler-alist file-name-handler-alist-old)))
#+end_src

* Packages

#+begin_src emacs-lisp
(use-package emacs
  :custom
  ;; C source code
  (auto-window-vscroll nil)
  (case-fold-search t)
  (create-lockfiles nil)
  (enable-recursive-minibuffers t)
  (fast-but-imprecise-scrolling t)
  (fill-column 78)
  (frame-inhibit-implied-resize t)
  (frame-resize-pixelwise t)
  (frame-title-format
   '(:eval
     (concat
      (if buffer-file-name default-directory "%b")
      "    "
      (number-to-string
       (cdr
        (assq 'width
              (frame-parameters))))
      "x"
      (number-to-string
       (cdr
        (assq 'height
              (frame-parameters)))))))
  (history-delete-duplicates t)
  (history-length 200)
  (load-prefer-newer t)
  (menu-bar-mode nil)
  (message-log-max 16384)
  (process-adaptive-read-buffering nil)
  (read-process-output-max (* 4 1024 1024))
  (redisplay-dont-pause t)
  (redisplay-skip-fontification-on-input t)
  (ring-bell-function 'ignore)
  (scroll-conservatively 100000)
  (scroll-margin 0)
  (scroll-preserve-screen-position 'always)
  (scroll-step 1)
  (show-trailing-whitespace nil)
  (tool-bar-mode nil)
  (truncate-lines nil)
  (truncate-partial-width-windows nil)
  (undo-limit 800000)
  (use-dialog-box nil)
  (use-file-dialog nil)
  (use-short-answers t)                 ; `yes-or-no-p' => `y-or-n-p'
  (visible-bell nil)
  (window-resize-pixelwise t)
  (x-stretch-cursor t)

  ;; advice.el
  (ad-redefinition-action 'accept)

  ;; bytecomp.el
  (byte-compile-verbose nil)

  ;; nsm.el
  (nsm-settings-file (my/user-data "network-security.data"))

  ;; paragraphs.el
  (sentence-end-double-space nil)

  ;; scroll-bar.el
  (scroll-bar-mode nil)

  ;; warnings.el
  (warning-minimum-log-level :error)

  ;; window.el
  (same-window-buffer-names
   '("*eshell*"
     "*shell*"
     "*mail*"
     "*inferior-lisp*"
     "*ielm*"
     "*scheme*"))
  (switch-to-buffer-preserve-window-point t)

  :init
  (setq disabled-command-function nil)  ; enable all commands

  :config
  (add-hook 'after-save-hook
            #'executable-make-buffer-file-executable-if-script-p))
#+end_src

** Builtin

*** abbrev

#+begin_src emacs-lisp
(use-package abbrev
  :diminish
  :custom
  (abbrev-file-name (my/emacs-path "abbrevs.el"))
  :hook
  ((text-mode prog-mode) . abbrev-mode)
  :config
  (if (file-exists-p abbrev-file-name)
      (quietly-read-abbrev-file))

  (add-hook 'expand-expand-hook #'indent-according-to-mode)
  (add-hook 'expand-jump-hook #'indent-according-to-mode))
#+end_src

*** align

#+begin_src emacs-lisp
(use-package align
  :commands (align align-regexp))
#+end_src

*** ansi-color

#+begin_src emacs-lisp
(use-package ansi-color
  :custom
  (ansi-color-names-vector
   ["black" "red" "green" "brown" "blue" "magenta" "blue" "white"]))
#+end_src

*** autorevert

#+begin_src emacs-lisp
(use-package autorevert
  :diminish auto-revert-mode
  :custom
  (auto-revert-use-notify nil)
  (auto-revert-verbose nil)
  (global-auto-revert-non-file-buffers t)
  :hook
  (after-init . global-auto-revert-mode))
#+end_src

*** bind-key

#+begin_src emacs-lisp
(use-package bind-key
  :custom
  (bind-key-segregation-regexp
   "\\`\\(\\(C-[chx.] \\|M-[gso] \\)\\([CM]-\\)?\\|.+-\\)"))
#+end_src

*** bookmark

#+begin_src emacs-lisp
(use-package bookmark
  :defer t
  :custom
  (bookmark-default-file (my/user-data "bookmarks")))
#+end_src

*** calendar

#+begin_src emacs-lisp
(use-package calendar
  :defer t
  :custom
  (calendar-date-style 'iso)
  (diary-file "~/org/area/diary"))
#+end_src

*** compile

#+begin_src emacs-lisp
(use-package compile
  :bind ("C-c C" . my/show-compilation)
  :custom
  (compilation-always-kill t)
  (compilation-ask-about-save nil)
  (compilation-context-lines 10)
  (compilation-scroll-output 'first-error)
  (compilation-skip-threshold 2)
  (compilation-window-height 100)
  :init
  (defun compilation-ansi-color-process-output ()
    (ansi-color-process-output nil)
    (set (make-local-variable 'comint-last-output-start)
         (point-marker)))
  :hook
  (compilation-filter . compilation-ansi-color-process-output)
  :config
  (defun my/show-compilation ()
    (interactive)
    (let ((it
           (catch 'found
             (dolist (buf (buffer-list))
               (when (string-match "\\*compilation\\*" (buffer-name buf))
                 (throw 'found buf))))))
      (if it
          (display-buffer it)
        (call-interactively 'compile)))))
#+end_src

*** cus-edit

#+begin_src emacs-lisp
(use-package cus-edit
  :custom
  (custom-file (my/emacs-path "settings.el"))
  (custom-raised-buttons nil))
#+end_src

*** custom

#+begin_src emacs-lisp
(use-package custom
  :custom
  (custom-safe-themes t))
#+end_src

*** dabbrev

#+begin_src emacs-lisp
(use-package dabbrev
  :bind ("C-M-/" . dabbrev-expand)
  :custom
  (dabbrev-case-fold-search nil)
  (dabbrev-case-replace nil))
#+end_src

*** delsel

#+begin_src emacs-lisp
(use-package delsel
  :hook
  (after-init . delete-selection-mode))
#+end_src

*** diff-mode

#+begin_src emacs-lisp
(use-package diff-mode
  :commands diff-mode
  :custom
  (diff-mode-hook '(diff-delete-empty-files diff-make-unified smerge-mode)))
#+end_src

*** dired

#+begin_src emacs-lisp
(use-package dired
  :bind (("C-x C-j"   . dired-jump)
         ("C-x 4 C-j" . dired-jump-other-window)
         :map dired-mode-map
         ("M-g"))
  :custom
  (dired-clean-up-buffers-too nil)
  (dired-dwim-target t)
  (dired-hide-details-hide-information-lines nil)
  (dired-hide-details-hide-symlink-targets nil)
  (dired-listing-switches "-lah")
  (dired-mouse-drag-files t)
  (dired-recursive-copies 'always)
  (dired-recursive-deletes 'top)
  :hook
  (dired-mode . dired-hide-details-mode))
#+end_src

**** dired-x

#+begin_src emacs-lisp
(use-package dired-x
  :after dired
  :custom
  (dired-omit-mode nil)
  (dired-omit-size-limit 60000))
#+end_src

*** display-fill-column-indicator

#+begin_src emacs-lisp
(use-package display-fill-column-indicator
  :custom
  (display-fill-column-indicator-character ?â”Š)
  (indicate-buffer-boundaries 'left)
  :hook
  (prog-mode . display-fill-column-indicator-mode))
#+end_src

*** display-line-numbers

#+begin_src emacs-lisp
(use-package display-line-numbers
  :custom
  (display-line-numbers-width 3)
  :hook
  (prog-mode . display-line-numbers-mode))
#+end_src

*** ediff

#+begin_src emacs-lisp
(use-package ediff
  :bind (:prefix-map
         my/ediff-map
         :prefix "C-c ="
         ("b" . ediff-buffers)
         ("B" . ediff-buffers3)
         ("c" . compare-windows)
         ("=" . ediff-files)
         ("f" . ediff-files)
         ("F" . ediff-files3)
         ("m" . count-matches)
         ("r" . ediff-revision)
         ("p" . ediff-patch-file)
         ("P" . ediff-patch-buffer)
         ("l" . ediff-regions-linewise)
         ("w" . ediff-regions-wordwise))
  :custom
  (ediff-combination-pattern
   '("<<<<<<< A: HEAD" A "||||||| Ancestor" Ancestor "=======" B ">>>>>>> B: Incoming"))
  (ediff-diff-options "-w")
  (ediff-highlight-all-diffs nil)
  (ediff-show-clashes-only t)
  (ediff-window-setup-function 'ediff-setup-windows-plain))
#+end_src

*** eglot

#+begin_src emacs-lisp
(use-package eglot
  :commands eglot
  :custom
  (eglot-autoshutdown t)
  :config
  (setq read-process-output-max (* 1024 1024))

  (add-hook 'eglot-managed-mode-hook
            #'(lambda ()
                ;; Show flymake diagnostics first.
                (setq eldoc-documentation-functions
                      (cons #'flymake-eldoc-function
                            (remove #'flymake-eldoc-function
                                    eldoc-documentation-functions))))))
#+end_src

*** eldoc

#+begin_src emacs-lisp
(use-package eldoc
  :diminish
  :hook
  (after-init . global-eldoc-mode))
#+end_src

*** elec-pair

#+begin_src emacs-lisp
(use-package elec-pair
  :hook
  (after-init . electric-pair-mode))
#+end_src

*** electric

#+begin_src emacs-lisp
(use-package electric
  :hook
  (after-init . electric-indent-mode))
#+end_src

*** erc

#+begin_src emacs-lisp
(use-package erc
  :defines (erc-fill-prefix
            erc-insert-timestamp-function
            erc-timestamp-format
            erc-timestamp-only-if-changed-flag
            erc-fill-column)
  :commands (erc erc-tls)
  :custom
  (erc-auto-query 'window-noselect)
  (erc-format-nick-function 'erc-format-@nick)
  (erc-header-line-format nil)
  (erc-hide-list '("JOIN" "NICK" "PART" "QUIT"))
  (erc-lurker-hide-list '("JOIN" "NICK" "PART" "QUIT" "MODE"))
  (erc-modules
   '(autojoin
     button
     completion
     dcc
     fill
     irccontrols
     list
     match
     menu
     move-to-prompt
     netsplit
     noncommands
     readonly
     replace
     ring
     services
     smiley
     stamp
     track
     truncate))
  (erc-port 6667)
  (erc-priority-people-regexp "\\`[^#].+")
  (erc-rename-buffers t)
  (erc-replace-alist '(("</?FONT>" . "")))
  (erc-server "irc.libera.chat")
  (erc-user-full-name 'user-full-name)

  ;; erc-autoaway.el
  (erc-autoaway-message "I'm away (after %i seconds of idle-time)")

  ;; erc-fill.el
  (erc-fill-function 'erc-fill-variable)
  (erc-fill-static-center 12)

  ;; erc-log.el
  (erc-generate-log-file-name-function 'erc-generate-log-file-name-short)
  (erc-log-channels-directory "~/Messages/ERC")
  (erc-log-write-after-send t)

  ;; erc-match.el
  (erc-text-matched-hook '(erc-hide-fools))

  ;; erc-services.el
  (erc-prompt-for-nickserv-password nil)
  (erc-services-mode t)
  (erc-use-auth-source-for-nickserv-password t)

  ;; erc-track.el
  (erc-track-enable-keybindings t)
  (erc-track-exclude-types
   '("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE" "333" "353"))
  (erc-track-faces-priority-list
   '(erc-error-face
     (erc-nick-default-face erc-current-nick-face)
     erc-current-nick-face erc-keyword-face
     (erc-nick-default-face erc-pal-face)
     erc-pal-face erc-nick-msg-face erc-direct-msg-face))
  (erc-track-score-mode t)
  (erc-track-showcount t)

  :hook
  (erc-mode . abbrev-mode)
  (erc-mode . erc-spelling-mode)

  :init
  (defun setup-irc-environment ()
    (set (make-local-variable 'scroll-conservatively) 100)
    (setq erc-timestamp-only-if-changed-flag nil
          erc-timestamp-format "%H:%M "
          erc-fill-prefix "          "
          erc-fill-column 78
          erc-insert-timestamp-function 'erc-insert-timestamp-left
          line-spacing 4))
  :hook
  (erc-mode . setup-irc-environment)
  :config
  (erc-track-minor-mode 1)
  (erc-track-mode 1))
#+end_src

*** ert

#+begin_src emacs-lisp
(use-package ert
  :bind (:map ert-results-mode-map
              ("g" . ert-results-rerun-all-tests)))
#+end_src

*** eshell

#+begin_src emacs-lisp
(use-package eshell
  :commands (eshell eshell-command)
  :custom
  (eshell-directory-name (my/user-data "eshell"))
  (eshell-hist-ignoredups t)
  (eshell-history-size 50000)
  (eshell-ls-dired-initial-args '("-h"))
  (eshell-ls-exclude-regexp "~\\'")
  (eshell-ls-initial-args "-h")
  (eshell-modules-list
   '(eshell-alias
     eshell-basic
     eshell-cmpl
     eshell-dirs
     eshell-glob
     eshell-hist
     eshell-ls
     eshell-pred
     eshell-prompt
     eshell-rebind
     eshell-script
     eshell-term
     eshell-unix
     eshell-xtra))
  (eshell-prompt-function
   (lambda nil
     (concat (abbreviate-file-name (eshell/pwd))
             (if (= (user-uid) 0)
                 " # " " $ "))))
  (eshell-rebind-keys-alist
   '(([(control 97)]  . eshell-bol)
     ([home]          . eshell-bol)
     ([(control 100)] . eshell-delchar-or-maybe-eof)
     ([backspace]     . eshell-delete-backward-char)
     ([delete]        . eshell-delete-backward-char)))
  (eshell-save-history-on-exit t)
  (eshell-stringify-t nil)
  (eshell-term-name "ansi")
  (eshell-visual-commands '("vi" "top" "screen" "less" "lynx" "rlogin" "telnet")))
#+end_src

*** etags

#+begin_src emacs-lisp
(use-package etags
  :defer t
  :custom
  (tags-add-tables t)
  (tags-apropos-verbose t)
  (tags-case-fold-search nil)
  (tags-revert-without-query t))
#+end_src

*** files

#+begin_src emacs-lisp
(use-package files
  :custom
  (auto-save-default nil)
  (auto-save-file-name-transforms '(("\\`/[^/]*:.*" "/tmp" t)))
  (backup-directory-alist `(("." . ,(my/user-data "backups"))))
  (delete-old-versions t)
  (directory-abbrev-alist '(("\\`/org" . "~/org")))
  (directory-free-space-args "-kh")
  (large-file-warning-threshold nil)
  (save-abbrevs 'silently)
  (trash-directory "~/.local/share/Trash")
  (version-control t))
#+end_src

*** find-dired

#+begin_src emacs-lisp
(use-package find-dired
  :defer t
  :custom
  (find-ls-option '("-print0 | xargs -P4 -0 ls -ldN" . "-ldN"))
  (find-ls-subdir-switches "-ldN"))
#+end_src

*** flymake

#+begin_src emacs-lisp
(use-package flymake
  :commands flymake-mode
  :config
  (setq eldoc-documentation-function 'eldoc-documentation-compose)
  (add-hook 'flymake-mode-hook
            #'(lambda ()
                (add-hook 'eldoc-documentation-functions
                          'flymake-eldoc-function nil t))))
#+end_src

*** flyspell

#+begin_src emacs-lisp
(use-package flyspell
  :after ispell
  :commands (flyspell-mode flyspell-buffer)
  :bind (:map flyspell-mode-map
              ("C-;")
              ("C-."))
  :custom
  (flyspell-use-meta-tab nil)
  (flyspell-abbrev-p nil))
#+end_src

*** font-lock

#+begin_src emacs-lisp
(use-package font-lock
  :custom
  (font-lock-verbose nil)
  (font-lock-support-mode 'jit-lock-mode))
#+end_src

*** frame

#+begin_src emacs-lisp
(use-package frame
  :custom
  (window-divider-default-places t)
  (window-divider-default-bottom-width 1)
  (window-divider-default-right-width 1)
  :hook
  (window-setup . window-divider-mode))
#+end_src

*** grep

#+begin_src emacs-lisp
(use-package grep
  :commands (find-grep
             find-grep-dired
             find-name-dired)
  :custom
  (grep-command "grep -nH -e ")
  (grep-find-command "find . -name '*' -type f -print0 | xargs -0 -P8 grep -nH ")
  (grep-highlight-matches t)
  (grep-scroll-output t))
#+end_src

*** help

#+begin_src emacs-lisp
(use-package help
  :custom
  (temp-buffer-resize-mode t))
#+end_src

*** hippie-exp

#+begin_src emacs-lisp
(use-package hippie-exp
  :bind ("M-/" . hippie-expand)
  :custom
  (hippie-expand-try-functions-list
   '(try-complete-file-name-partially
     try-complete-file-name
     try-expand-dabbrev
     try-expand-dabbrev-all-buffers
     try-expand-dabbrev-from-kill)))
#+end_src

*** ibuffer

#+begin_src emacs-lisp
(use-package ibuffer
  :bind ("C-x C-b" . ibuffer)
  :custom
  (ibuffer-default-display-maybe-show-predicates t)
  (ibuffer-expert t)
  (ibuffer-filter-group-name-face 'font-lock-doc-face)
  (ibuffer-shrink-to-minimum-size t)
  (ibuffer-use-other-window t)
  (ibuffer-use-other-window t)

  ;; ibuf-ext.el
  (ibuffer-maybe-show-regexps nil)
  (ibuffer-saved-filter-groups
   '(("default"
      ("Commands"
       (or
        (mode . shell-mode)
        (mode . eshell-mode)
        (mode . term-mode)
        (mode . compilation-mode)))
      ("Dired"
       (mode . dired-mode))
      ("Emacs"
       (or
        (name . "^\\*scratch\\*$")
        (name . "^\\*Messages\\*$")
        (name . "^\\*\\(Customize\\|Help\\)")
        (name . "\\*\\(Echo\\|Minibuf\\)")))
      ("Gnus"
       (or
        (mode . message-mode)
        (mode . mail-mode)
        (mode . gnus-group-mode)
        (mode . gnus-summary-mode)
        (mode . gnus-article-mode)
        (name . "^\\.newsrc-dribble")
        (name . "^\\*\\(sent\\|unsent\\|fetch\\)")
        (name . "^ \\*\\(nnimap\\|nntp\\|nnmail\\|gnus\\|server\\|mm\\*\\)")
        (name . "\\(Original Article\\|canonical address\\|extract address\\)")))
      ("Lisp"
       (mode . emacs-lisp-mode))
      ("Magit"
       (or
        (mode . magit-status-mode)
        (mode . magit-log-mode)
        (name . "\\*magit")
        (name . "magit-")
        (name . "git-monitor")))
      ("Org"
       (or
        (name . "^\\*Calendar\\*$")
        (name . "^\\*Org Agenda")
        (name . "^ \\*Agenda")
        (name . "^diary$")
        (mode . org-mode))))))
  (ibuffer-show-empty-filter-groups nil)

  :init
  (add-hook 'ibuffer-mode-hook
            #'(lambda ()
                (ibuffer-switch-to-saved-filter-groups "default")))

  :config
  (define-ibuffer-column size-h
    ;; human readable Size column
    (:name "Size" :inline t)
    (file-size-human-readable (buffer-size))))
#+end_src

*** image-mode

#+begin_src emacs-lisp
(use-package image-mode
  :hook
  (image-mode . image-transform-reset-to-initial)
  :config
  (auto-image-file-mode 1))
#+end_src

*** indent

#+begin_src emacs-lisp
(use-package indent
  :commands indent-according-to-mode
  :custom
  (tab-always-indent 'complete))
#+end_src

*** info

#+begin_src emacs-lisp
(use-package info
  :bind ("C-h C-i" . info-lookup-symbol)
  :custom
  (Info-fit-frame-flag nil)
  :config
  (eval-when-compile
    (defvar buffer-face-mode-face))

  (add-hook 'Info-mode-hook
            #'(lambda ()
                (setq buffer-face-mode-face '(:family "Bookerly"))
                (buffer-face-mode)
                (text-scale-adjust 1))))
#+end_src

*** isearch

#+begin_src emacs-lisp
(use-package isearch
  :bind (:map isearch-mode-map
              ("C-o" . isearch-occur)
              ([remap isearch-delete-char] . isearch-del-char)))
#+end_src

*** ispell

#+begin_src emacs-lisp
(use-package ispell
  :bind (:prefix-map
         my/ispell-map
         :prefix "C-c i"
         ("c" . ispell-comments-and-strings)
         ("d" . ispell-change-dictionary)
         ("k" . ispell-kill-ispell)
         ("m" . ispell-message)
         ("r" . ispell-region))
  :custom
  (ispell-extra-args '("--sug-mode=fast"))
  (ispell-dictionary "en"))
#+end_src

*** jit-lock

#+begin_src emacs-lisp
(use-package jit-lock
  :custom
  (jit-lock-defer-time 0))
#+end_src

*** jka-compr

#+begin_src emacs-lisp
(use-package jka-compr
  :custom
  (auto-compression-mode t))
#+end_src

*** lisp-mode

#+begin_src emacs-lisp
(use-package lisp-mode
  :bind (:map lisp-mode-map
              ("<C-M-backspace>" . backward-kill-sexp))
  :custom
  (parens-require-spaces t)
  :hook
  ((emacs-lisp-mode lisp-mode) .
   (lambda () (add-hook 'after-save-hook #'check-parens nil t))))
#+end_src

**** elint

#+begin_src emacs-lisp
(use-package elint
  :commands (elint-initialize elint-current-buffer))
#+end_src

**** pretty-printer

#+begin_src emacs-lisp
(use-package pp
  :bind (:map emacs-lisp-mode-map
              ("C-x C-e" . sanityinc/eval-last-sexp-or-region))
  :config
  (defun sanityinc/eval-last-sexp-or-region (prefix)
    "Eval region from BEG to END if active, otherwise the last sexp."
    (interactive "P")
    (if (and (mark) (use-region-p))
        (eval-region (min (point) (mark)) (max (point) (mark)))
      (pp-eval-last-sexp prefix)))

  (defun sanityinc/make-read-only (_expression out-buffer-name &rest _)
    "Enable `view-mode' in the output buffer - if any - so it can be closed with `\"q\"."
    (when (get-buffer out-buffer-name)
      (with-current-buffer out-buffer-name
        (view-mode 1))))
  (advice-add 'pp-display-expression :after 'sanityinc/make-read-only))
#+end_src

*** midnight

#+begin_src emacs-lisp
(use-package midnight
  :custom
  (clean-buffer-list-kill-never-buffer-names
   '("*scratch*"
     "*Messages*"
     "*server*"
     "*Group*"
     "*Org Agenda*"
     "todo.org"
     "habits.org"
     "diary"))
  (clean-buffer-list-kill-never-regexps
   '("^ \\*Minibuf-.*\\*$"
     "^\\*Summary"
     "^\\*Article" "^#"))
  (clean-buffer-list-kill-regexps '(".*"))
  (midnight-delay 18000)
  :hook
  (after-init . midnight-mode))
#+end_src

*** minibuffer

#+begin_src emacs-lisp
(use-package minibuffer
  :custom
  (completion-category-overrides nil)
  (completion-cycle-threshold 4)
  (completion-category-defaults nil))
#+end_src

*** mule

#+begin_src emacs-lisp
(use-package mule
  :preface
  (set-charset-priority 'unicode)
  (setq locale-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  :init
  (set-terminal-coding-system 'utf-8)
  (unless (eq system-type 'windows-nt)
    (set-selection-coding-system 'utf-8)))
#+end_src

*** outline

#+begin_src emacs-lisp
(use-package outline
  :diminish outline-minor-mode
  :hook
  ((emacs-lisp-mode LaTeX-mode) . outline-minor-mode))
#+end_src

*** paren

#+begin_src emacs-lisp
(use-package paren
  :custom
  (show-paren-delay 0.1)
  :hook
  (after-init . show-paren-mode))
#+end_src

*** pixel-scroll

#+begin_src emacs-lisp
(use-package pixel-scroll
  :hook
  (after-init . pixel-scroll-precision-mode))
#+end_src

*** prog-mode

#+begin_src emacs-lisp
(use-package prog-mode
  :custom
  (prettify-symbols-unprettify-at-point 'right-edge)
  :hook
  (emacs-lisp-mode . prettify-symbols-mode))
#+end_src

*** re-builder

#+begin_src emacs-lisp
(use-package re-builder
  :bind (:map reb-mode-map
              ("C-c C-k" . reb-quit))
  :custom
  (reb-re-syntax 'string))
#+end_src

*** recentf

#+begin_src emacs-lisp
(use-package recentf
  :unless noninteractive
  :commands (recentf-mode
             recentf-add-file
             recentf-apply-filename-handlers)
  :custom
  (recentf-auto-cleanup 60)
  (recentf-exclude
   `("/tmp/" "/ssh:" ,(concat package-user-dir "/.*-autoloads\\.el\\'")))
  (recentf-max-saved-items 2000)
  (recentf-save-file (my/user-data "recentf"))
  :hook
  (after-init . recentf-mode)
  :config
  (defun my/recentf-add-dired-directory ()
    "Add directories visit by dired into recentf."
    (if (and dired-directory
             (file-directory-p dired-directory)
             (not (string= "/" dired-directory)))
        (let ((last-idx (1- (length dired-directory))))
          (recentf-add-file
           (if (= ?/ (aref dired-directory last-idx))
               (substring dired-directory 0 last-idx)
             dired-directory)))))

  (add-hook 'dired-mode-hook #'my/recentf-add-dired-directory))
#+end_src

*** rect

#+begin_src emacs-lisp
(use-package rect
  :bind ("C-x SPC" . rectangle-mark-mode))
#+end_src

*** repeat

#+begin_src emacs-lisp
(use-package repeat
  :hook
  (after-init . repeat-mode))
#+end_src

*** savehist

#+begin_src emacs-lisp
(use-package savehist
  :unless noninteractive
  :custom
  (savehist-additional-variables
   '(file-name-history
     kmacro-ring
     compile-history
     compile-command))
  (savehist-autosave-interval 60)
  (savehist-file (my/user-data "history"))
  (savehist-ignored-variables
   '(load-history
     flyspell-auto-correct-ring
     magit-revision-history
     org-read-date-history
     query-replace-history
     yes-or-no-p-history
     kill-ring))
  :hook
  (after-init . savehist-mode))
#+end_src

*** saveplace

#+begin_src emacs-lisp
(use-package saveplace
  :unless noninteractive
  :custom
  (save-place-file (my/user-data "places"))
  :hook
  (after-init . save-place-mode))
#+end_src

*** server

#+begin_src emacs-lisp
(use-package server
  :hook
  (after-init . server-start))
#+end_src

*** simple

#+begin_src emacs-lisp
(use-package simple
  :bind (("M-j" . join-line)
         ([remap just-one-space] . cycle-spacing))
  :custom
  (backward-delete-char-untabify-method 'untabify)
  (column-number-mode t)
  (idle-update-delay 1.0)
  (indent-tabs-mode nil)
  (kill-do-not-save-duplicates t)
  (kill-ring-max 500)
  (kill-whole-line t)
  (line-number-mode t)
  (mail-user-agent 'gnus-user-agent)
  (next-line-add-newlines nil)
  (save-interprogram-paste-before-kill t)
  :config
  (defun sanityinc/shell-command-in-view-mode
      (start end command &optional output-buffer replace &rest other-args)
    "Put \"*Shell Command Output*\" buffers into view-mode."
    (unless (or output-buffer replace)
      (with-current-buffer "*Shell Command Output*"
        (view-mode 1))))
  (advice-add 'shell-command-on-region :after 'sanityinc/shell-command-in-view-mode))
#+end_src

*** smerge-mode

#+begin_src emacs-lisp
(use-package smerge-mode
  :commands smerge-mode)
#+end_src

*** so-long

#+begin_src emacs-lisp
(use-package so-long
  :hook
  (after-init . so-long-enable))
#+end_src

*** startup

#+begin_src emacs-lisp
(use-package startup
  :no-require t
  :custom
  (inhibit-startup-echo-area-message nil)
  (inhibit-startup-screen t)
  (initial-buffer-choice t)
  (initial-major-mode 'lisp-interaction-mode)
  (initial-scratch-message (concat ";; Happy hacking, " user-login-name " - Emacs â™¥ you!\n\n"))
  (auto-save-list-file-prefix (my/user-data "auto-save-list/.saves-")))
#+end_src

*** term

#+begin_src emacs-lisp
(use-package term
  :bind (:map term-mode-map
              ("C-c C-y" . term-paste))
  :custom
  (term-buffer-maximum-size 0)
  (term-scroll-show-maximum-output t))
#+end_src

*** text-mode

#+begin_src emacs-lisp
(use-package text-mode
  :hook
  (text-mode . turn-on-auto-fill))
#+end_src

*** time

#+begin_src emacs-lisp
(use-package time
  :custom
  (display-time-default-load-average nil)
  (display-time-format "%H:%M"))
#+end_src

*** tramp

#+begin_src emacs-lisp
(use-package tramp
  :defer t
  :custom
  (tramp-auto-save-directory (my/user-data "backups"))
  (tramp-default-method "ssh")
  :config
  ;; jww (2018-02-20): Without this change, tramp ends up sending hundreds of
  ;; shell commands to the remote side to ask what the temporary directory is.
  (put 'temporary-file-directory 'standard-value '("/tmp"))

  ;; Setting this with `:custom' does not take effect.
  (setq tramp-persistency-file-name (my/user-data "tramp")))
#+end_src

*** transient

#+begin_src emacs-lisp
(use-package transient
  :defer t
  :custom
  (transient-history-file (my/user-data "transient/history.el"))
  (transient-values-file (my/user-data "transient/values.el")))
#+end_src

*** uniquify

#+begin_src emacs-lisp
(use-package uniquify
  :custom
  (uniquify-after-kill-buffer-p t)
  (uniquify-ignore-buffers-re "^\\*")
  (uniquify-separator " â€¢ ")
  (uniquify-buffer-name-style 'reverse))
#+end_src

*** url

#+begin_src emacs-lisp
(use-package url
  :custom
  (url-configuration-directory (my/user-data "url/")))
#+end_src

*** vc

#+begin_src emacs-lisp
(use-package vc
  :bind (:map vc-prefix-map
              ("f" . vc-git-grep))
  :custom
  (vc-command-messages t)
  (vc-handled-backends '(Git SVN CVS Bzr Hg))
  (vc-make-backup-files t)
  (vc-follow-symlinks t))
#+end_src

*** whitespace

#+begin_src emacs-lisp
(use-package whitespace
  :diminish (whitespace-mode
             whitespace-newline-mode
             global-whitespace-mode)
  :commands (whitespace-mode whitespace-cleanup)
  :custom
  (whitespace-line-column 80)
  (whitespace-style '(face trailing lines-tail space-before-tab))
  :hook
  ((prog-mode text-mode conf-mode) .
   (lambda () (setq-local show-trailing-whitespace t))))
#+end_src

*** winner

#+begin_src emacs-lisp
(use-package winner
  :hook
  (after-init . winner-mode))
#+end_src

** Core

*** aggressive-indent

#+begin_src emacs-lisp
(use-package aggressive-indent
  :ensure t
  :hook
  (emacs-lisp-mode . aggressive-indent-mode))
#+end_src

*** avy

#+begin_src emacs-lisp
(use-package avy
  :ensure t
  :bind ("C-;" . avy-goto-char-timer)
  :custom
  (avy-case-fold-search t)
  (avy-keys '(97 111 101 117 105 100 104 116 110 115))
  (avy-timeout-seconds 0.3)
  :config
  (avy-setup-default))
#+end_src

*** bm

#+begin_src emacs-lisp
(use-package bm
  :ensure t
  :bind (("C-c b b" . bm-toggle)
         ("C-c b n" . bm-next)
         ("C-c b p" . bm-previous))
  :commands (bm-repository-load
             bm-buffer-save
             bm-buffer-save-all
             bm-buffer-restore)
  :custom
  (bm-buffer-persistence t)
  (bm-cycle-all-buffers t)
  (bm-highlight-style 'bm-highlight-only-fringe)
  (bm-in-lifo-order t)
  (bm-repository-file (my/user-data "bm-repository"))
  :hook
  (after-init        . bm-repository-load)
  (find-file         . bm-buffer-restore)
  (after-revert      . bm-buffer-restore)
  (kill-buffer       . bm-buffer-save)
  (after-save        . bm-buffer-save)
  (vc-before-checkin . bm-buffer-save)
  (kill-emacs        . (lambda ()
                         (bm-buffer-save-all)
                         (bm-repository-save))))
#+end_src

*** consult

#+begin_src emacs-lisp
(use-package consult
  :ensure t
  :bind (;; C-c bindings in `mode-specific-map'
         ("C-c M-x"           . consult-mode-command)
         ([remap Info-search] . consult-info)

         ;; C-x bindings in `ctl-x-map'
         ("C-x M-:" . consult-complex-command)     ;; orig. repeat-complex-command
         ("C-x b"   . consult-buffer)              ;; orig. switch-to-buffer
         ("C-x 4 b" . consult-buffer-other-window) ;; orig. switch-to-buffer-other-window
         ("C-x 5 b" . consult-buffer-other-frame)  ;; orig. switch-to-buffer-other-frame
         ("C-x t b" . consult-buffer-other-tab)    ;; orig. switch-to-buffer-other-tab
         ("C-x r b" . consult-bookmark)            ;; orig. bookmark-jump
         ("C-x p b" . consult-project-buffer)      ;; orig. project-switch-to-buffer

         ;; Custom M-# bindings for fast register access
         ("M-#"   . consult-register-load)
         ("M-'"   . consult-register-store)        ;; orig. abbrev-prefix-mark (unrelated)
         ("C-M-#" . consult-register)

         ;; Other custom bindings
         ("M-y" . consult-yank-pop)                ;; orig. yank-pop

         ;; M-g bindings in `goto-map'
         ("M-g e"   . consult-compile-error)
         ("M-g f"   . consult-flymake)             ;; Alternative: consult-flycheck
         ("M-g g"   . consult-goto-line)           ;; orig. goto-line
         ("M-g M-g" . consult-goto-line)           ;; orig. goto-line
         ("M-g o"   . consult-outline)             ;; Alternative: consult-org-heading
         ("M-g m"   . consult-mark)
         ("M-g k"   . consult-global-mark)
         ("M-g i"   . consult-imenu)
         ("M-g I"   . consult-imenu-multi)

         ;; M-s bindings in `search-map'
         ("M-s d" . consult-find)                  ;; Alternative: consult-fd
         ("M-s c" . consult-locate)
         ("M-s g" . consult-grep)
         ("M-s G" . consult-git-grep)
         ("M-s r" . consult-ripgrep)
         ("M-s l" . consult-line)
         ("M-s L" . consult-line-multi)
         ("M-s k" . consult-keep-lines)
         ("M-s u" . consult-focus-lines)

         ;; Isearch integration
         ("M-s e" . consult-isearch-history)
         :map isearch-mode-map
         ("M-e"   . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s e" . consult-isearch-history)       ;; orig. isearch-edit-string
         ("M-s l" . consult-line)                  ;; needed by consult-line to detect isearch
         ("M-s L" . consult-line-multi)            ;; needed by consult-line to detect isearch

         ;; Minibuffer history
         :map minibuffer-local-map
         ("M-s" . consult-history)                 ;; orig. next-matching-history-element
         ("M-r" . consult-history))                ;; orig. previous-matching-history-element

  :custom
  (consult-narrow-key "<")
  (consult-widen-key ">")

  :hook
  ;; Enable automatic preview at point in the *Completions* buffer. This is
  ;; relevant when you use the default completion UI.
  (completion-list-mode . consult-preview-at-point-mode)

  :init
  ;; Optionally configure the register formatting. This improves the register
  ;; preview for `consult-register', `consult-register-load',
  ;; `consult-register-store' and the Emacs built-ins.
  (setq register-preview-delay 0.5
        register-preview-function #'consult-register-format)

  ;; Optionally tweak the register preview window.
  ;; This adds thin lines, sorting and hides the mode line of the window.
  (advice-add #'register-preview :override #'consult-register-window)

  ;; Use Consult to select xref locations with preview
  (setq xref-show-xrefs-function #'consult-xref
        xref-show-definitions-function #'consult-xref)

  :config
  (consult-customize
   consult-theme :preview-key '(:debounce 0.2 any)
   consult-ripgrep consult-git-grep consult-grep
   consult-bookmark consult-recent-file consult-xref
   consult--source-bookmark consult--source-file-register
   consult--source-recent-file consult--source-project-recent-file
   :preview-key '(:debounce 0.4 any)))
#+end_src

*** corfu

#+begin_src emacs-lisp
(use-package corfu
  :ensure t
  :bind (:map corfu-map
              ("<return>" . corfu-insert)
              ("<escape>" . corfu-quit)
              ("TAB"      . corfu-next)
              ([tab]      . corfu-next)
              ("S-TAB"    . corfu-previous)
              ([backtab]  . corfu-previous))
  :custom
  (corfu-auto t)
  (corfu-max-width 70)
  (corfu-min-width 20)
  :hook
  (after-init . global-corfu-mode)
  :config
  (with-eval-after-load 'eshell
    (add-hook 'eshell-mode-hook #'(lambda () (setq-local corfu-auto nil)))))
#+end_src

**** corfu-popupinfo

#+begin_src emacs-lisp
(use-package corfu-popupinfo
  :after corfu
  :bind (:map corfu-map
              ("M-n" . corfu-popupinfo-scroll-up)
              ("M-p" . corfu-popupinfo-scroll-down)
              ([remap corfu-show-documentation] . corfu-popupinfo-toggle))
  :custom
  (corfu-popupinfo-max-height 20)
  (corfu-popupinfo-max-width 70)
  :hook
  (corfu-mode . corfu-popupinfo-mode))
#+end_src

**** corfu-terminal

#+begin_src emacs-lisp
(use-package corfu-terminal
  :ensure t
  :after corfu
  :config
  (corfu-terminal-mode))
#+end_src

*** default-text-scale

#+begin_src emacs-lisp
(use-package default-text-scale
  :ensure t
  :hook
  (after-init . default-text-scale-mode))
#+end_src

*** diff-hl

#+begin_src emacs-lisp
(use-package diff-hl
  :ensure t
  :commands (diff-hl-mode
             diff-hl-dired-mode
             global-diff-hl-mode)
  :bind (:map diff-hl-mode-map
              ("<left-fringe> <mouse-1>" . diff-hl-diff-goto-hunk)
              ("M-C-]" . diff-hl-next-hunk)
              ("M-C-[" . diff-hl-previous-hunk)))
#+end_src

*** diminish

#+begin_src emacs-lisp
(use-package diminish
  :ensure t
  :commands (diminish diminish-undo))
#+end_src

*** embark

#+begin_src emacs-lisp
(use-package embark
  :ensure t
  :bind (("C-." . embark-act)
         ("M-." . embark-dwim)
         :map embark-collect-mode-map
         ("C-c C-a" . embark-collect-direct-action-minor-mode))
  :config
  ;; Hide the mode line of the Embark live/completions buffers
  (add-to-list 'display-buffer-alist
               '("\\`\\*Embark Collect \\(Live\\|Completions\\)\\*"
                 nil
                 (window-parameters (mode-line-format . none)))))
#+end_src

**** embark-consult

#+begin_src emacs-lisp
(use-package embark-consult
  :ensure t
  :after embark
  :hook
  (embark-collect-mode . consult-preview-at-point-mode))
#+end_src

*** feebleline

#+begin_src emacs-lisp
(use-package feebleline
  :ensure t
  :commands feebleline-mode)
#+end_src

*** gcmh

#+begin_src emacs-lisp
(use-package gcmh
  :ensure t
  :diminish
  :custom
  (gcmh-high-cons-threshold (* 128 1024 1024))
  :hook
  (after-init . gcmh-mode))
#+end_src

*** helpful

#+begin_src emacs-lisp
(use-package helpful
  :ensure t
  :bind (:prefix-map
         my/helpful-map
         :prefix "C-h h"
         ("c" . helpful-command)
         ("f" . helpful-function)
         ("k" . helpful-key)
         ("l" . helpful-callable)
         ("m" . helpful-macro)
         ("s" . helpful-at-point)
         ("v" . helpful-variable)))
#+end_src

*** ibuffer-vc

#+begin_src emacs-lisp
(use-package ibuffer-vc
  :ensure t
  :custom
  (ibuffer-formats
   '((mark modified read-only vc-status-mini " "
           (name 22 22 :left :elide)
           " "
           (size-h 9 -1 :right)
           " "
           (mode 12 12 :left :elide)
           " "
           vc-relative-file)
     (mark modified read-only vc-status-mini " "
           (name 22 22 :left :elide)
           " "
           (size-h 9 -1 :right)
           " "
           (mode 14 14 :left :elide)
           " "
           (vc-status 12 12 :left)
           " "
           vc-relative-file)))
  :init
  (defun ibuffer-set-up-preferred-filters ()
    (ibuffer-vc-set-filter-groups-by-vc-root)
    (unless (eq ibuffer-sorting-mode 'filename/process)
      (ibuffer-do-sort-by-filename/process)))
  :hook
  (ibuffer . ibuffer-set-up-preferred-filters))
#+end_src

*** lispy

#+begin_src emacs-lisp
(use-package lispy
  :ensure t
  :commands lispy-mode
  :bind (:map
         lispy-mode-map
         ("M-j")
         :map
         emacs-lisp-mode-map
         ("C-1"     . lispy-describe-inline)
         ("C-2"     . lispy-arglist-inline)
         ("C-c C-j" . lispy-goto))
  :custom
  (lispy-imenu-function 'consult-imenu))
#+end_src

*** macrostep

#+begin_src emacs-lisp
(use-package macrostep
  :ensure t
  :bind (:map emacs-lisp-mode-map
              ("C-c e m" . macrostep-expand)))
#+end_src

*** magit

#+begin_src emacs-lisp
(use-package magit
  :ensure t
  :commands magit
  :custom
  (magit-diff-options nil)
  (magit-diff-refine-hunk t)

  ;; This is done for the sake of performance on macOS
  (magit-git-executable "git")
  (magit-highlight-trailing-whitespace nil)
  (magit-highlight-whitespace nil)
  (magit-log-section-commit-count 10)
  (magit-pre-refresh-hook nil)
  (magit-process-popup-time 15)
  (magit-push-always-verify nil)
  ;; You can tell Magit to only automatically refresh the current Magit
  ;; buffer, but not the status buffer. If you do that, then the status buffer
  ;; is only refreshed automatically if it is the current buffer.
  (magit-refresh-status-buffer nil)
  (magit-section-initial-visibility-alist '((untracked . hide)))
  (magit-stage-all-confirm nil)
  (magit-unstage-all-confirm nil)
  (magit-use-overlays nil)
  :hook
  (magit-mode . hl-line-mode)
  :config
  ;; Magit also reverts buffers for visited files located inside the current
  ;; repository when the visited file changes on disk. That is implemented on
  ;; top of auto-revert-mode from the built-in library autorevert. To figure
  ;; out whether that impacts performance, check whether performance is
  ;; significantly worse, when many buffers exist and/or when some buffers
  ;; visit files using TRAMP. If so, then this should help.
  (setq auto-revert-buffer-list-filter
        'magit-auto-revert-repository-buffer-p)

  ;; When refreshing the "references buffer" is slow, then that's usually
  ;; because several hundred refs are being displayed. The best way to address
  ;; that is to display fewer refs, obviously.
  (remove-hook 'magit-refs-sections-hook 'magit-insert-tags))
#+end_src

**** git-commit

#+begin_src emacs-lisp
(use-package git-commit
  :ensure t
  :custom
  (git-commit-setup-hook
   '(git-commit-save-message
     git-commit-turn-on-auto-fill
     git-commit-turn-on-flyspell
     bug-reference-mode))
  :hook
  (git-commit-mode . goto-address-mode))
#+end_src

**** magit-autorevert

#+begin_src emacs-lisp
(use-package magit-autorevert
  :after magit
  :custom
  (magit-auto-revert-mode nil))
#+end_src

**** magit-commit

#+begin_src emacs-lisp
(use-package magit-commit
  :defer t
  :config
  ;; When you initiate a commit, then Magit by default automatically shows a
  ;; diff of the changes you are about to commit. For large commits this can
  ;; take a long time, which is especially distracting when you are committing
  ;; large amounts of generated data which you don't actually intend to
  ;; inspect before committing. This behavior can be turned off using:
  (remove-hook 'server-switch-hook 'magit-commit-diff)
  (remove-hook 'with-editor-filter-visit-hook 'magit-commit-diff))
#+end_src

**** magit-pull

#+begin_src emacs-lisp
(use-package magit-pull
  :defer t
  :config
  (transient-insert-suffix 'magit-pull "p"
    '("F" "default" magit-fetch-from-upstream)))
#+end_src

**** magit-push

#+begin_src emacs-lisp
(use-package magit-push
  :defer t
  :config
  (transient-insert-suffix 'magit-push "p"
    '("P" "default" magit-push-current-to-upstream)))
#+end_src

**** magit-status

#+begin_src emacs-lisp
(use-package magit-status
  :bind (("C-x g" . magit-status)
         ("C-x G" . magit-status-with-prefix))
  :config
  ;; Speed up Magit status by not generating all of the available sections.
  (dolist (func '(
                  ;; magit-insert-status-headers
                  ;; magit-insert-untracked-files
                  ;; magit-insert-unstaged-changes
                  ;; magit-insert-staged-changes
                  ;; magit-insert-stashes
                  ;; magit-insert-unpushed-to-pushremote
                  magit-insert-unpushed-to-upstream-or-recent
                  magit-insert-unpulled-from-pushremote
                  magit-insert-unpulled-from-upstream
                  ))
    (remove-hook 'magit-status-sections-hook func))

  (dolist (func '(
                  ;; magit-insert-error-header
                  magit-insert-diff-filter-header
                  ;; magit-insert-head-branch-header
                  ;; magit-insert-upstream-branch-header
                  ;; magit-insert-push-branch-header
                  magit-insert-tags-header
                  ))
    (remove-hook 'magit-status-headers-hook func))

  (defun magit-status-with-prefix ()
    (interactive)
    (let ((current-prefix-arg '(4)))
      (call-interactively 'magit-status))))
#+end_src

*** marginalia

#+begin_src emacs-lisp
(use-package marginalia
  :ensure t
  :hook
  (after-init . marginalia-mode))
#+end_src

*** orderless

#+begin_src emacs-lisp
(use-package orderless
  :ensure t
  :custom
  (completion-styles '(orderless basic)))
#+end_src

**** eglot-orderless

#+begin_src emacs-lisp
(use-package eglot-orderless
  :no-require t
  :after (eglot orderless)
  :config
  (add-to-list 'completion-category-overrides
               '(eglot (styles orderless basic))))
#+end_src

*** paredit

#+begin_src emacs-lisp
(use-package paredit
  :ensure t
  :diminish
  :bind (:map
         paredit-mode-map
         ("M-r")
         ("M-s")
         ("M-k"   . paredit-raise-sexp)
         ("M-I"   . paredit-splice-sexp)
         ("C-M-l" . paredit-recentre-on-sexp)
         :prefix-map my/paredit-map
         :prefix "C-c ("
         ("n" . paredit-add-to-next-list)
         ("p" . paredit-add-to-previous-list)
         ("j" . paredit-join-with-next-list)
         ("J" . paredit-join-with-previous-list)
         :map
         lisp-mode-map
         ("M-r")
         ("<return>" . paredit-newline)
         :map
         emacs-lisp-mode-map
         ("M-r")
         ("<return>" . paredit-newline))
  :hook
  ((lisp-mode emacs-lisp-mode) . paredit-mode))
#+end_src

*** projectile

#+begin_src emacs-lisp
(use-package projectile
  :ensure t
  :bind-keymap ("C-c p" . projectile-command-map)
  :bind* ("C-c P" . (lambda () (interactive)
                      (projectile-cleanup-known-projects)
                      (projectile-discover-projects-in-search-path)))
  :custom
  (projectile-cache-file (my/user-data "projectile.cache"))
  (projectile-enable-caching t)
  (projectile-file-exists-local-cache-expire 300)
  (projectile-known-projects-file (my/user-data "projectile-bookmarks.eld"))
  (projectile-mode-line-prefix " Proj")
  (projectile-project-search-path '("~/projects" "~/workspaces"))
  (projectile-sort-order 'recentf)
  :hook
  (after-init . projectile-mode)
  :config
  (when (executable-find "rg")
    (setq-default projectile-generic-command "rg --files --hidden -0")))
#+end_src

*** rime

#+begin_src emacs-lisp
(use-package rime
  :ensure t
  :bind (:map
         rime-mode-map
         ("C-`" . rime-send-keybinding)
         :map
         rime-active-mode-map
         ("TAB" . rime-inline-ascii))
  :custom
  (rime-disable-predicates
   '(rime-predicate-prog-in-code-p
     rime-predicate-tex-math-or-command-p
     rime-predicate-in-code-string-p))
  (rime-inline-predicates
   '(rime-predicate-space-after-cc-p
     rime-predicate-after-ascii-char-p))
  (rime-user-data-dir (my/user-data "rime"))
  :init
  (setq default-input-method "rime"
        mode-line-mule-info '((:eval (rime-lighter)))))
#+end_src

*** session

#+begin_src emacs-lisp
(use-package session
  :ensure t
  :unless noninteractive
  :init
  ;; Setting this with `:custom' does not take effect.
  (setq session-name-disable-regexp "\\(?:\\`'/tmp\\|\\.git/[A-Z_]+\\'\\)"
        session-save-file (my/user-data "session")
        session-save-file-coding-system 'utf-8)
  :hook
  (after-init . session-initialize))
#+end_src

*** switch-window

#+begin_src emacs-lisp
(use-package switch-window
  :ensure t
  :bind ("C-x o" . switch-window)
  :custom
  (switch-window-shortcut-style 'qwerty)
  (switch-window-timeout nil))
#+end_src

*** treemacs

#+begin_src emacs-lisp
(use-package treemacs
  :ensure t
  :commands treemacs)
#+end_src

*** vertico

#+begin_src emacs-lisp
(use-package vertico
  :ensure t
  :bind (:map vertico-map
              ("C-j"   . vertico-exit-input)
              ("C-M-n" . vertico-next-group)
              ("C-M-p" . vertico-previous-group))
  :custom
  (vertico-count 10)
  (vertico-cycle t)
  (vertico-resize nil)
  :hook
  (after-init . vertico-mode)
  :config
  (defun crm-indicator (args)
    (cons (format "[CRM%s] %s"
                  (replace-regexp-in-string
                   "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                   crm-separator)
                  (car args))
          (cdr args)))

  ;; Add prompt indicator to `completing-read-multiple'.
  ;; We display [CRM<separator>], e.g., [CRM,] if the separator is a comma.
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)

  ;; Do not allow the cursor in the minibuffer prompt
  (setq minibuffer-prompt-properties
        '(read-only t cursor-intangible t face minibuffer-prompt))

  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)

  ;; Hide commands in M-x which do not work in the current mode. Vertico
  ;; commands are hidden in normal buffers.
  (setq read-extended-command-predicate #'command-completion-default-include-p))
#+end_src

**** vertico-directory

#+begin_src emacs-lisp
(use-package vertico-directory
  :after vertico
  :bind (:map vertico-map
              ("<backspace>"   . vertico-directory-delete-char)
              ("DEL"           . vertico-directory-delete-char)
              ("C-w"           . vertico-directory-delete-word)
              ("C-<backspace>" . vertico-directory-delete-word))
  :hook
  (rfn-eshadow-update-overlay . vertico-directory-tidy))
#+end_src

**** vertico-quick

#+begin_src emacs-lisp
(use-package vertico-quick
  :after vertico
  :bind (:map vertico-map
              ("C-." . vertico-quick-exit)))
#+end_src

**** vertico-repeat

#+begin_src emacs-lisp
(use-package vertico-repeat
  :after vertico
  :bind ("C-x ." . vertico-repeat)
  :hook
  (minibuffer-setup . vertico-repeat-save))
#+end_src

*** vundo

#+begin_src emacs-lisp
(use-package vundo
  :ensure t
  :bind* ("C-x u" . vundo))
#+end_src

*** wdired

#+begin_src emacs-lisp
(use-package wdired
  :after dired
  :bind (:map dired-mode-map
              ("w"       . wdired-change-to-wdired-mode)
              ("C-c C-q" . wdired-change-to-wdired-mode)))
#+end_src

*** wgrep

#+begin_src emacs-lisp
(use-package wgrep
  :ensure t
  :after grep
  :bind (:map grep-mode-map
              ("w"       . wgrep-change-to-wgrep-mode)
              ("C-c C-q" . wgrep-change-to-wgrep-mode)))
#+end_src

*** which-key

#+begin_src emacs-lisp
(use-package which-key
  :ensure t
  :diminish
  :hook
  (after-init . which-key-mode))
#+end_src

*** whitespace-cleanup-mode

#+begin_src emacs-lisp
(use-package whitespace-cleanup-mode
  :ensure t
  :diminish
  :hook
  (after-init . global-whitespace-cleanup-mode))
#+end_src

*** yasnippet

#+begin_src emacs-lisp
(use-package yasnippet
  :ensure t
  :commands yas-minor-mode-on
  :bind (:map yas-minor-mode-map
              ("TAB")
              ("M-0" . yas-expand)
              :map yas-keymap
              ("TAB")
              ("S-<tab>")
              ("<backtab>")
              ("M-1" . yas-prev-field)
              ("M-2" . yas-next-field-or-maybe-expand))
  :mode ("/\\.emacs\\.d/snippets/" . snippet-mode)
  :custom
  (yas-prompt-functions '(yas-completing-prompt yas-no-prompt))
  (yas-snippet-dirs (list (my/emacs-path "snippets")))
  (yas-triggers-in-field t)
  (yas-wrap-around-region t)
  :hook
  (org-mode . yas-minor-mode)
  :config
  (yas-load-directory (my/emacs-path "snippets")))
#+end_src

**** auto-yasnippet

#+begin_src emacs-lisp
(use-package auto-yasnippet
  :ensure t
  :after yasnippet
  :bind (:map yas-minor-mode-map
              ("C-c y a" . aya-create)
              ("C-c y e" . aya-expand)
              ("C-c y o" . aya-open-line)))
#+end_src

**** yasnippet-snippets

#+begin_src emacs-lisp
(use-package yasnippet-snippets
  :ensure t
  :after yasnippet)
#+end_src

** Gnus

#+begin_src emacs-lisp
(use-package gnus
  :defer t
  :custom
  (gnus-interactive-exit 'quiet)
  (gnus-large-newsgroup 4000)
  (gnus-message-archive-group '((format-time-string "sent.%Y")))
  (gnus-novice-user nil)
  (gnus-parameters
   '(("list\\.gnu\\.prog\\.discuss$"
      (list-identifier . "\\[gnu-prog-discuss\\]"))
     ("\\`gmane\\."
      (spam-process gnus-group-spam-exit-processor-report-gmane))
     ("list\\.github$"
      (total-expire . t)
      (expiry-wait . 90)
      (expiry-target . delete))
     ("mail\\.spam"
      (total-expire . t)
      (expiry-wait . 28)
      (expiry-target . delete)
      (ham-process-destination . "INBOX")
      (spam-contents gnus-group-spam-classification-spam))
     ("mail\\.spam\\.report"
      (total-expire . t)
      (expiry-wait . 28)
      (expiry-target . delete)
      (ham-process-destination . "INBOX")
      (spam-contents gnus-group-spam-classification-spam))
     ("list\\."
      (subscribed . t))
     ("INBOX"
      (total-expire . t)
      (expiry-wait . 90)
      (expiry-target . "mail.archive")
      (spam-process-destination . "mail.spam.report")
      (spam-contents gnus-group-spam-classification-ham))
     ("\\(mail\\.\\|INBOX\\)"
      (gnus-use-scoring nil))))
  (gnus-refer-article-method
   '(current
     (nntp "Gmane"
           (nntp-address "news.gmane.org"))))
  (gnus-registry-ignored-groups '(("nntp" t) ("^INBOX" t)))
  (gnus-summary-line-format "%U%R%z%I%(%[%4L: %-14,14f%]%) %s\n")
  (gnus-suppress-duplicates t)
  (gnus-use-adaptive-scoring '(line))
  (gnus-use-cache t)

  ;; gnus-async.el
  (gnus-asynchronous t)

  ;; gnus-cache.el
  (gnus-uncacheable-groups "^nnml")

  ;; gnus-msg.el
  (gnus-mailing-list-groups "\\`\\(list\\|wg21\\)\\.")
  (gnus-message-replysign t)

  ;; gnus-salt.el
  (gnus-generate-tree-function 'gnus-generate-horizontal-tree)
  (gnus-mark-unpicked-articles-as-read t)
  (gnus-summary-pick-line-format "%U%R %uS %ur %(%*%-14,14f  %B%s%)\n")
  (gnus-tree-minimize-window nil)

  ;; gnus-topic.el
  (gnus-topic-display-empty-topics nil)
  (gnus-topic-line-format "%i[ %A: %(%{%n%}%) ]%v\n")

  ;; gnus-util.el
  (gnus-verbose 4)
  (ssl-certificate-verification-policy 1)

  :init
  (setq gnus-home-directory "~/Messages/Gnus/"))
#+end_src

*** gnus-agent

#+begin_src emacs-lisp
(use-package gnus-agent
  :after gnus
  :commands gnus-unplugged
  :custom
  (gnus-agent-expire-all t)
  (gnus-agent-expire-days 14)
  (gnus-agent-go-online t)
  (gnus-agent-mark-unread-after-downloaded nil)
  (gnus-agent-synchronize-flags t))
#+end_src

*** gnus-art

#+begin_src emacs-lisp
(use-package gnus-art
  :after gnus
  :bind (:map gnus-article-mode-map
              ("F"   . gnus-article-wide-reply-with-original)
              ("M-q" . gnus-article-fill-long-lines))
  :custom
  (gnus-article-update-date-headers nil)
  (gnus-default-article-saver 'gnus-summary-save-in-mail)
  (gnus-ignored-mime-types
   '("application/x-pkcs7-signature"
     "application/ms-tnef"
     "text/x-vcard"))
  (gnus-signature-separator '("^-- $" "^-- *$" "^_____+$"))
  (gnus-split-methods
   '((gnus-save-site-lisp-file)
     (gnus-article-archive-name)
     (gnus-article-nndoc-name)))
  (gnus-treat-hide-citation-maybe t)
  (gnus-treat-strip-cr t)
  (gnus-treat-strip-leading-blank-lines t)
  (gnus-treat-strip-multiple-blank-lines t)
  (gnus-treat-strip-trailing-blank-lines t)
  (gnus-treat-unsplit-urls t))
#+end_src

*** gnus-demon

#+begin_src emacs-lisp
(use-package gnus-demon
  :after gnus
  :config
  (gnus-demon-add-handler 'gnus-demon-close-connections nil 3))
#+end_src

*** gnus-dired

#+begin_src emacs-lisp
(use-package gnus-dired
  :after gnus
  :hook
  (dired-mode . gnus-dired-mode))
#+end_src

*** gnus-group

#+begin_src emacs-lisp
(use-package gnus-group
  :after gnus
  :custom
  (gnus-group-default-list-level 2)
  (gnus-group-line-format "%S%p%P%M%5y: %(%B%G%B%)\n")
  (gnus-group-mode-hook '(gnus-agent-mode gnus-topic-mode hl-line-mode))
  (gnus-group-use-permanent-levels t)
  (gnus-permanently-visible-groups "INBOX")
  :hook
  (gnus-group-mode   . gnus-topic-mode)
  (gnus-group-mode   . hl-line-mode)
  (gnus-suspend-gnus . gnus-group-save-newsrc))
#+end_src

**** gnus-score

#+begin_src emacs-lisp
(use-package gnus-score
  :after gnus-group
  :custom
  (gnus-default-adaptive-score-alist
   '((gnus-saved-mark
      (subject 250)
      (from 50))
     (gnus-dormant-mark
      (subject 150)
      (from 50))
     (gnus-forwarded-mark
      (subject 100)
      (from 25))
     (gnus-replied-mark
      (subject 75)
      (from 15))
     (gnus-ticked-mark
      (subject 0)
      (from 0))
     (gnus-read-mark
      (subject 30)
      (from 5))
     (gnus-del-mark
      (subject 5)
      (from 0))
     (gnus-recent-mark
      (subject 0)
      (from 0))
     (gnus-killed-mark
      (subject -5)
      (from -5))
     (gnus-catchup-mark
      (subject -150)
      (from 0))
     (gnus-duplicate-mark
      (subject -150)
      (from 0))
     (gnus-expirable-mark
      (subject -250)
      (from 0))
     (gnus-spam-mark
      (subject -10)
      (from -150))))
  (gnus-score-default-duration 'p)
  (gnus-score-expiry-days 30)
  (gnus-score-interactive-default-score 10))
#+end_src

*** gnus-start

#+begin_src emacs-lisp
(use-package gnus-start
  :after gnus
  :custom
  (gnus-activate-level 2)
  (gnus-always-read-dribble-file t)
  (gnus-check-new-newsgroups nil)
  (gnus-read-active-file nil)
  (gnus-read-newsrc-file nil)
  (gnus-save-killed-list nil)
  (gnus-save-newsrc-file nil)
  (gnus-subscribe-newsgroup-method 'gnus-subscribe-topics)
  :init
  (setq gnus-startup-file (expand-file-name ".newsrc" gnus-home-directory))
  :hook
  (gnus-after-getting-new-news . gnus-display-time-event-handler)
  (gnus-after-getting-new-news . gnus-group-list-groups)
  (gnus-after-getting-new-news . gnus-group-save-newsrc)
  (gnus-started . (lambda () (run-hooks 'gnus-after-getting-new-news-hook))))
#+end_src

*** gnus-sum

#+begin_src emacs-lisp
(use-package gnus-sum
  :after gnus
  :bind (:map gnus-summary-mode-map
              ("F"          . gnus-summary-wide-reply-with-original)
              ("M-q"        . gnus-article-fill-long-lines)
              ("B <delete>" . gnus-summary-delete-article))
  :custom
  (gnus-simplify-subject-functions '(gnus-simplify-subject-fuzzy))
  (gnus-sum-thread-tree-false-root nil)
  (gnus-sum-thread-tree-indent " ")
  (gnus-sum-thread-tree-leaf-with-other "â”œâ”€â”€ ")
  (gnus-sum-thread-tree-root nil)
  (gnus-sum-thread-tree-single-indent nil)
  (gnus-sum-thread-tree-single-indent nil)
  (gnus-sum-thread-tree-single-leaf "â””â”€â”€ ")
  (gnus-sum-thread-tree-vertical "â”‚ ")
  (gnus-summary-expunge-below -100)
  (gnus-summary-mark-below -100)
  (gnus-summary-prepared-hook '(gnus-summary-hide-all-threads))
  (gnus-summary-save-parts-default-mime ".*")
  (gnus-thread-expunge-below -1000)
  (gnus-thread-hide-subtree t)
  (gnus-thread-ignore-subject nil)
  (gnus-thread-score-function 'max)
  (gnus-thread-sort-functions '((not gnus-thread-sort-by-number)))
  :hook
  (gnus-select-group . gnus-group-set-timestamp)
  (gnus-summary-mode . hl-line-mode))
#+end_src

*** message

#+begin_src emacs-lisp
(use-package message
  :bind ("C-x m" . compose-mail)        ; defined in `simple.el'
  :custom
  (message-directory (expand-file-name "Mail/" gnus-home-directory))
  (message-fill-column 78)
  (message-interactive t)
  (message-mail-alias-type nil)
  (message-mode-hook
   '(abbrev-mode
     footnote-mode
     turn-on-auto-fill
     turn-on-flyspell
     (lambda nil (set-fill-column 78))))
  (message-send-mail-function 'message-send-mail-with-sendmail)
  (message-send-mail-partially-limit nil)
  (message-sendmail-envelope-from 'header)
  (message-sendmail-extra-arguments '("--read-envelope-from"))
  (message-sendmail-f-is-evil t)
  (message-setup-hook '(message-check-recipients))
  (message-signature-separator "^-- *$")
  (message-subscribed-address-functions '(gnus-find-subscribed-addresses))
  :hook
  (message-sent . gnus-score-followup-thread))
#+end_src

**** mm-decode

#+begin_src emacs-lisp
(use-package mm-decode
  :after message
  :custom
  (mm-attachment-override-types
   '("text/x-vcard"
     "application/pkcs7-mime"
     "application/x-pkcs7-mime"
     "application/pkcs7-signature"
     "application/x-pkcs7-signature"
     "image/.*"))
  (mm-decrypt-option 'always)
  (mm-discouraged-alternatives
   '("application/msword"
     "text/richtext"))
  (mm-enable-external 'ask)
  (mm-text-html-renderer 'shr)
  (mm-verify-option 'always))
#+end_src

**** mml-sec

#+begin_src emacs-lisp
(use-package mml-sec
  :after message
  :custom
  (mml-secure-openpgp-sign-with-sender t))
#+end_src

**** sendmail

#+begin_src emacs-lisp
(use-package sendmail
  :after message
  :custom
  (mail-envelope-from 'header)
  (mail-personal-alias-file "~/Messages/mailrc")
  (mail-self-blind t)
  (mail-setup-with-from nil)
  (mail-specify-envelope-from t)
  (send-mail-function 'sendmail-send-it)
  (sendmail-program "msmtp")

  ;; mail-source.el
  (mail-source-delete-incoming t)
  (mail-source-delete-old-incoming-confirm nil)
  (mail-source-report-new-mail-interval 15)
  (mail-sources '((file))))
#+end_src

**** supercite

#+begin_src emacs-lisp
(use-package supercite
  :after message
  :commands sc-cite-original
  :custom
  (sc-citation-leader "")
  (sc-confirm-always-p nil)
  (sc-default-attribution "")
  (sc-preferred-attribution-list '("initials"))
  (sc-use-only-preference-p t)
  :hook
  (mail-citation . sc-cite-original))
#+end_src

*** nnmail

#+begin_src emacs-lisp
(use-package nnmail
  :after gnus
  :custom
  (nnmail-crosspost nil)
  (nnmail-expiry-wait 30)
  (nnmail-extra-headers '(To Cc Newsgroups))
  (nnmail-scan-directory-mail-source-once t))
#+end_src

*** spam

#+begin_src emacs-lisp
(use-package spam
  :after gnus)
#+end_src

** Languages

*** clojure-mode

#+begin_src emacs-lisp
(use-package clojure-mode
  :ensure t
  :hook
  (clojure-mode . paredit-mode))
#+end_src

**** cider

#+begin_src emacs-lisp
(use-package cider
  :ensure t
  :hook
  (clojure-mode . cider-mode)
  (cider-repl-mode . paredit-mode))
#+end_src

*** haskell-mode

#+begin_src emacs-lisp
(use-package haskell-mode
  :ensure t
  :mode (("\\.hs\\(c\\|-boot\\)?\\'" . haskell-mode)
         ("\\.lhs\\'" . haskell-literate-mode)
         ("\\.cabal\\'" . haskell-cabal-mode))
  :bind (:map
         haskell-mode-map
         ("C-c C-," . haskell-navigate-imports)
         ("C-c C-." . haskell-mode-format-imports)
         ("C-c C-z" . haskell-interactive-switch))
  :hook
  (haskell-mode . haskell-indentation-mode)
  (haskell-mode . interactive-haskell-mode)
  (haskell-mode . subword-mode)
  (haskell-cabal-mode . subword-mode))
#+end_src

*** js

#+begin_src emacs-lisp
(use-package js
  :mode ("\\.js\\'" . js-mode)
  :custom
  (js-indent-level 2))
#+end_src

**** js2-mode

#+begin_src emacs-lisp
(use-package js2-mode
  :ensure t
  :after js
  :interpreter "node"
  :custom
  (js2-bounce-indent-p nil)
  (js2-mode-show-parse-errors nil)
  (js2-mode-show-strict-warnings nil)
  :config
  (js2-imenu-extras-setup))
#+end_src

**** typescript-mode

#+begin_src emacs-lisp
(use-package typescript-mode
  :ensure t
  :mode "\\.ts\\'"
  :custom
  (typescript-indent-level 2))
#+end_src

*** python

#+begin_src emacs-lisp
(use-package python
  :mode ("\\.py\\'" . python-mode)
  :custom
  (python-shell-interpreter "python3"))
#+end_src

*** ruby-mode

#+begin_src emacs-lisp
(use-package ruby-mode
  :mode "\\.rb\\'"
  :interpreter "ruby"
  :custom
  (ruby-insert-encoding-magic-comment nil)
  (ruby-use-encoding-map nil)
  :hook
  (ruby-mode . subword-mode))
#+end_src

*** rust-mode

#+begin_src emacs-lisp
(use-package rust-mode
  :ensure t
  :mode "\\.rs\\'")
#+end_src

**** cargo

#+begin_src emacs-lisp
(use-package cargo
  :ensure t
  :after rust-mode
  :commands cargo-minor-mode)
#+end_src

** Org-mode

#+begin_src emacs-lisp
(use-package org
  :commands org-resolve-clocks
  :bind* (("C-c S" . org-store-link)
          ("C-c l" . org-insert-link))
  :bind (:map org-mode-map
              ("M-n"    . org-next-link)
              ("M-p"    . org-previous-link)
              ([return] . (lambda () (interactive) (org-return t))))
  :custom
  (org-M-RET-may-split-line '((headline) (default . t)))
  (org-adapt-indentation nil)
  (org-agenda-files '("~/org/area/todo.org"
                      "~/org/area/habits.org"))
  (org-agenda-inhibit-startup t)
  (org-agenda-skip-unavailable-files t)
  (org-agenda-text-search-extra-files '(agenda-archives))
  (org-clone-delete-id nil)
  (org-deadline-warning-days 14)
  (org-default-notes-file "~/org/area/todo.org")
  (org-directory "~/org/")
  (org-enforce-todo-dependencies t)
  (org-extend-today-until 4)
  (org-fast-tag-selection-single-key 'expert)
  (org-fontify-whole-heading-line t)
  (org-hide-emphasis-markers t)
  (org-hide-leading-stars t)
  (org-image-actual-width 800)
  (org-insert-heading-respect-content t)
  (org-log-redeadline 'time)
  (org-log-reschedule 'time)
  (org-log-state-notes-insert-after-drawers t)
  (org-pretty-entities t)
  (org-reverse-note-order t)
  (org-special-ctrl-a/e t)
  (org-special-ctrl-k t)
  (org-src-fontify-natively nil)
  (org-startup-folded 'show3levels)
  (org-startup-with-inline-images t)
  (org-tags-exclude-from-inheritance '("crypt"))
  (org-todo-keywords
   '((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
     (sequence "PROJECT(p)" "|" "DONE(d!/!)" "CANCELLED(c@/!)")
     (sequence "WAITING(w@/!)" "DELEGATED(e!)" "HOLD(h)" "|" "CANCELLED(c@/!)")))
  (org-todo-repeat-to-state "NEXT")
  (org-treat-S-cursor-todo-selection-as-state-change nil)
  (org-use-fast-todo-selection 'expert)
  (org-use-sub-superscripts nil)
  (org-yank-adjusted-subtrees t)

  ;; org-clock.el
  (org-clock-clocked-in-display nil)
  (org-clock-idle-time 10)
  (org-clock-in-resume t)
  (org-clock-in-switch-to-state "HOLD")
  (org-clock-into-drawer "LOGBOOK")
  (org-clock-mode-line-total 'current)
  (org-clock-out-remove-zero-time-clocks t)
  (org-clock-out-switch-to-state nil)
  (org-clock-persist t)
  (org-clock-persist-file (my/user-data "org-clock-save.el"))
  (org-clock-resolve-expert t)

  ;; org-compat.el
  (org-imenu-depth 4)
  ;; C-c C-r (org-reveal) will display where the point is if it is buried in
  ;; invisible text to allow editing again.
  (org-catch-invisible-edits 'error)

  ;; org-cycle.el
  (org-cycle-global-at-bob t)
  (org-cycle-inline-images-display t)

  ;; org-faces.el
  (org-fontify-quote-and-verse-blocks t)
  (org-todo-keyword-faces
   '(("NEXT" :inherit warning)
     ("PROJECT" :inherit font-lock-string-face)))

  ;; org-fold.el
  (org-fold-catch-invisible-edits 'smart)
  (org-fontify-done-headline t)

  ;; org-footnote.el
  (org-footnote-define-inline t)
  (org-footnote-section nil)

  ;; org-keys.el
  (org-return-follows-link nil)
  (org-use-speed-commands t)

  ;; org-refile.el
  (org-log-refile 'time)
  (org-outline-path-complete-in-steps nil)
  (org-refile-target-verify-function 'sanityinc/verify-refile-target)
  (org-refile-targets '((nil :maxlevel . 5) (org-agenda-files :maxlevel . 5)))
  (org-refile-use-cache t)
  (org-refile-use-outline-path t)

  ;; org-src.el
  (org-edit-src-content-indentation 0)
  (org-src-tab-acts-natively t)
  (org-src-window-setup 'current-window)

  :hook
  (org-mode . abbrev-mode)
  (org-mode . turn-on-auto-fill)
  ;; (org-mode . turn-on-flyspell)
  (org-mode . (lambda () (electric-pair-local-mode -1)))
  :hook
  (org-log-buffer-setup . abbrev-mode)
  (org-log-buffer-setup . turn-on-auto-fill)
  (org-log-buffer-setup . turn-on-flyspell)
  (org-log-buffer-setup . (lambda () (setq-local fill-column (- 78 2))))
  :config
  (defun sanityinc/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets."
    (not (member (nth 2 (org-heading-components)) org-done-keywords))))
#+end_src

*** org-agenda

#+begin_src emacs-lisp
(use-package org-agenda
  :commands org-agenda-list
  :bind* ("C-c a" . org-agenda)
  :bind (:map org-agenda-mode-map
              (" "   . org-agenda-tree-to-indirect-buffer)
              (">"   . org-agenda-filter-by-top-headline)
              ("C-n" . next-line)
              ("C-p" . previous-line)
              ("F"   . org-agenda-follow-mode)
              ("M-n" . org-agenda-later)
              ("M-p" . org-agenda-earlier)
              ("b"   . org-agenda-date-earlier)
              ("f"   . org-agenda-date-later)
              ("g"   . org-agenda-redo)
              ("q"   . bury-buffer)
              ("x"   . org-agenda-todo)
              ("w"   . org-agenda-refile))
  :custom
  (org-agenda-compact-blocks t)
  (org-agenda-custom-commands
   '(("N" "Notes" tags "NOTE"
      ((org-agenda-overriding-header "Notes")
       (org-tags-match-list-sublevels t)))
     ("g" "GTD"
      ((agenda "" nil)
       (tags "INBOX"
             ((org-agenda-overriding-header "Inbox")
              (org-tags-match-list-sublevels nil)))
       (stuck ""
              ((org-agenda-overriding-header "Stuck Projects")
               (org-agenda-tags-todo-honor-ignore-options t)
               (org-tags-match-list-sublevels t)
               (org-agenda-todo-ignore-scheduled 'future)))
       (tags-todo "-INBOX"
                  ((org-agenda-overriding-header "Next Actions")
                   (org-agenda-tags-todo-honor-ignore-options t)
                   (org-agenda-todo-ignore-scheduled 'future)
                   (org-agenda-skip-function
                    '(lambda ()
                       (or (org-agenda-skip-subtree-if 'todo '("HOLD" "WAITING"))
                           (org-agenda-skip-entry-if 'nottodo '("NEXT")))))
                   (org-tags-match-list-sublevels t)
                   (org-agenda-sorting-strategy
                    '(todo-state-down effort-up category-keep))))
       (tags-todo "-INBOX/PROJECT"
                  ((org-agenda-overriding-header "Projects")
                   (org-tags-match-list-sublevels t)
                   (org-agenda-sorting-strategy
                    '(category-keep))))
       (tags-todo "-INBOX/-NEXT"
                  ((org-agenda-overriding-header "Orphaned Tasks")
                   (org-agenda-tags-todo-honor-ignore-options t)
                   (org-agenda-todo-ignore-scheduled 'future)
                   (org-agenda-skip-function
                    '(lambda ()
                       (or (org-agenda-skip-subtree-if 'todo '("PROJECT" "HOLD" "WAITING" "DELEGATED"))
                           (org-agenda-skip-subtree-if 'nottododo '("TODO")))))
                   (org-tags-match-list-sublevels t)
                   (org-agenda-sorting-strategy
                    '(category-keep))))
       (tags-todo "/WAITING"
                  ((org-agenda-overriding-header "Waiting")
                   (org-agenda-tags-todo-honor-ignore-options t)
                   (org-agenda-todo-ignore-scheduled 'future)
                   (org-agenda-sorting-strategy
                    '(category-keep))))
       (tags-todo "/DELEGATED"
                  ((org-agenda-overriding-header "Delegated")
                   (org-agenda-tags-todo-honor-ignore-options t)
                   (org-agenda-todo-ignore-scheduled 'future)
                   (org-agenda-sorting-strategy
                    '(category-keep))))
       (tags-todo "-INBOX"
                  ((org-agenda-overriding-header "On Hold")
                   (org-agenda-skip-function
                    '(lambda ()
                       (or (org-agenda-skip-subtree-if 'todo '("WAITING"))
                           (org-agenda-skip-entry-if 'nottodo '("HOLD")))))
                   (org-tags-match-list-sublevels nil)
                   (org-agenda-sorting-strategy
                    '(category-keep))))
       (tags-todo "-NEXT"
                  ((org-agenda-overriding-header "All other TODOs")
                   (org-match-list-sublevels t)))
       ))))
  (org-agenda-deadline-leaders '("!D!: " "D%02d: " "D-%02d:"))
  (org-agenda-default-appointment-duration 60)
  (org-agenda-fontify-priorities t)
  (org-agenda-include-diary t)
  (org-agenda-log-mode-items '(closed clock state))
  (org-agenda-ndays 1)
  (org-agenda-persistent-filter t)
  (org-agenda-scheduled-leaders '("" "S%d: "))
  (org-agenda-scheduled-relative-text "S%d: ")
  (org-agenda-scheduled-text "")
  (org-agenda-show-all-dates t)
  (org-agenda-show-outline-path nil)
  (org-agenda-skip-deadline-if-done t)
  (org-agenda-skip-scheduled-if-deadline-is-shown t)
  (org-agenda-skip-scheduled-if-done t)
  (org-agenda-sorting-strategy
   '((agenda habit-down time-up todo-state-up priority-down)
     (todo priority-down category-keep)
     (tags priority-down category-keep)
     (search category-keep)))
  (org-agenda-span 'day)
  (org-agenda-start-on-weekday nil)
  (org-agenda-start-with-log-mode nil)
  (org-agenda-tags-column -100)
  (org-agenda-tags-todo-honor-ignore-options t)
  (org-agenda-todo-ignore-scheduled 'past)
  (org-agenda-use-time-grid nil)
  (org-agenda-window-frame-fractions '(0.5 . 0.75))
  (org-stuck-projects '("-INBOX/PROJECT" ("NEXT"))))
#+end_src

*** org-appear

#+begin_src emacs-lisp
(use-package org-appear
  :ensure t
  :after org
  :hook
  (org-mode . org-appear-mode))
#+end_src

*** org-attach

#+begin_src emacs-lisp
(use-package org-attach
  :after (org dired)
  :bind (:map dired-mode-map
              ("C-c C-x a" . org-attach-dired-to-subtree))
  :custom
  (org-attach-auto-tag "FILE")
  (org-attach-file-list-property "FILE")
  (org-attach-id-dir "~/org/data")
  (org-attach-method 'cp)
  (org-attach-store-link-p 'attached))
#+end_src

*** org-babel

#+begin_src emacs-lisp
(use-package org-babel
  :no-require t
  :after org
  :custom
  (org-confirm-babel-evaluate nil)
  (org-export-use-babel nil)
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   (seq-filter
    (lambda (pair)
      (locate-library (concat "ob-" (symbol-name (car pair)))))
    '((C . t)
      (R . t)
      (ditaa . t)
      (dot . t)
      (emacs-lisp . t)
      (gnuplot . t)
      (haskell . nil)
      (latex . t)
      (ledger . t)
      (ocaml . nil)
      (octave . t)
      (python . t)
      (ruby . t)
      (shell . t)
      (sql . t)
      (sqlite . t)))))
#+end_src

*** org-capture

#+begin_src emacs-lisp
(use-package org-capture
  :after org
  :custom
  (org-capture-templates
   `(("t" "todo" entry (file "")        ; "" => `org-default-notes-file'
      "* NEXT %?\n%U\n" :clock-resume t)
     ("n" "note" entry (file "")
      "* %? :NOTE:\n%U\n%a\n" :clock-resume t)
     )))
#+end_src

*** org-crypt

#+begin_src emacs-lisp
(use-package org-crypt
  :after org
  :bind (:map org-mode-map
              ("C-c C-x C-/"  . org-decrypt-entry)
              ("C-c C-x C-\\" . org-encrypt-entry))
  :custom
  (org-crypt-key "0xBA39EA53EFF3C20D")
  :config
  (org-crypt-use-before-save-magic))
#+end_src

*** org-download

#+begin_src emacs-lisp
(use-package org-download
  :ensure t
  :after org
  :bind (:map org-mode-map
              ("C-c C-x C" . org-download-clipboard)
              ("C-c C-x Y" . org-download-yank))
  :custom
  (org-download-method 'attach))
#+end_src

*** org-habit

#+begin_src emacs-lisp
(use-package org-habit
  :after org-agenda
  :custom
  (org-habit-preceding-days 42)
  (org-habit-today-glyph 45))
#+end_src

*** org-id

#+begin_src emacs-lisp
(use-package org-id
  :after org
  :bind (:map org-mode-map
              ("C-c C-x i" . org-id-get-create))
  :custom
  (org-id-link-to-org-use-id t)
  (org-id-locations-file (my/user-data "org-id-locations")))
#+end_src

*** org-modern

#+begin_src emacs-lisp
(use-package org-modern
  :ensure t
  :after org
  :custom
  (org-modern-list '((43 . "â—¦") (45 . "â€¢") (42 . "â‹†")))
  (org-modern-star nil)
  (org-modern-todo t)
  :hook
  (org-mode . org-modern-mode))
#+end_src

*** org-protocol

#+begin_src emacs-lisp
(use-package org-protocol
  :after org
  :custom
  (org-protocol-default-template-key "l"))
#+end_src

*** org-ql

#+begin_src emacs-lisp
(use-package org-ql
  :ensure t
  :after org
  :commands (org-ql-find org-ql-search))
#+end_src

*** org-rich-yank

#+begin_src emacs-lisp
(use-package org-rich-yank
  :ensure t
  :after org
  :bind (:map org-mode-map
              ("C-M-y" . org-rich-yank)))
#+end_src

*** ox

**** ox-pandoc

#+begin_src emacs-lisp
(use-package ox-pandoc
  :ensure t
  :after org)
#+end_src

** Supplementary

*** command-log-mode

#+begin_src emacs-lisp
(use-package command-log-mode
  :ensure t
  :commands command-log-mode)
#+end_src

*** editorconfig

#+begin_src emacs-lisp
(use-package editorconfig
  :ensure t
  :commands editorconfig-mode)
#+end_src

*** evil

#+begin_src emacs-lisp
(use-package evil
  :ensure t
  :commands evil-mode)
#+end_src

*** free-keys

#+begin_src emacs-lisp
(use-package free-keys
  :ensure t
  :commands free-keys)
#+end_src

*** git-timemachine

#+begin_src emacs-lisp
(use-package git-timemachine
  :ensure t
  :commands git-timemachine)
#+end_src

*** immortal-scratch

#+begin_src emacs-lisp
(use-package immortal-scratch
  :ensure t
  :hook
  (after-init . immortal-scratch-mode))
#+end_src

*** markdown-mode

#+begin_src emacs-lisp
(use-package markdown-mode
  :ensure t
  :mode (("\\.md\\'"       . markdown-mode)
         ("\\.markdown\\'" . markdown-mode))
  :custom
  (markdown-command "pandoc")
  (markdown-command-needs-filename t)
  (markdown-enable-math t)
  :config
  (defun my/markdown-to-org-region (start end)
    "Convert region from markdown to org, replacing selection"
    (interactive "r")
    (shell-command-on-region start end "pandoc -f markdown -t org" t t)))
#+end_src

*** pandoc-mode

#+begin_src emacs-lisp
(use-package pandoc-mode
  :ensure t
  :hook
  (markdown-mode
   (pandoc-mode . pandoc-load-default-settings)))
#+end_src

*** rainbow-delimiters

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :ensure t
  :hook
  (prog-mode . rainbow-delimiters-mode))
#+end_src

* Finalization

#+begin_src emacs-lisp
(when (file-exists-p custom-file)
  (load custom-file))

(provide 'init)

;; Local Variables:
;; coding: utf-8
;; no-byte-compile: t
;; End:

;;; init.el ends here
#+end_src
